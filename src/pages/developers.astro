---
import DeveloperCard from '@components/DeveloperCard.astro';
import Layout from '@layouts/Layout.astro';


const developers = [
  { name: 'Varshith', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Len', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Karthik', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Varshith', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Len', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Karthik', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Varshith', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Len', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Karthik', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Varshith', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Len', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Karthik', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Varshith', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Len', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Karthik', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Varshith', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Len', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Karthik', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
];


---

<Layout>


    <main class="content-container">
      <div class="mt-32 flex flex-col gap-8 items-center">
        <h2 class="fade-up uppercase text-6xl text-center">Meet the dev team</h2>
        <div class="flex flex-wrap gap-32 justify-center">
          {
            developers.map((dev, index) => (
              <div class="item">
              <DeveloperCard
                name={dev.name}
                description={dev.description}
                linkedinLink={dev.linkedinLink}
                githubLink={dev.githubLink}
                />
            </div>
          ))
        }
      </div>
      
    </div>
  </main>

</Layout>

<style>
  body {
      overflow-x: hidden;
    }
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(50px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .fade-up {
    opacity: 0;
    transform: translateY(50px);
    animation: slideUp 1s ease-out forwards;
  }

  
</style>

<script>
  import gsap from 'gsap';
  import ScrollTrigger from 'gsap/src/ScrollTrigger';
  gsap.registerPlugin(ScrollTrigger);

  const cards = gsap.utils.toArray('.item') as HTMLDivElement[];

  cards.forEach((element, i) => {
    gsap.set(element, { opacity: 0 });
    gsap.from(element, {
      y: 200,
      scrollTrigger: {
        trigger: element,
        start: 'top 100%',
      },
    });
  });

  ScrollTrigger.batch('.item', {
    onEnter: (batch) => gsap.to(batch, { opacity: 1, y: 0, stagger: { each: 0.15, grid: [1, 3] }, overwrite: true }),
    onLeaveBack: (batch) => gsap.set(batch, { opacity: 0, y: 100, overwrite: true }),
  });

  ScrollTrigger.addEventListener('refreshInit', () => {
    gsap.set('.item', { y: 0 });
    //@ts-ignore
import { tsParticles } from "https://cdn.jsdelivr.net/npm/@tsparticles/engine@3.1.0/+esm";
//@ts-ignore
import { loadAll } from "https://cdn.jsdelivr.net/npm/@tsparticles/all@3.1.0/+esm";

async function loadParticles(options:any) {
  await loadAll(tsParticles);

  await tsParticles.load({ id: "tsparticles", options });
}

const configs = {
  particles: {
    number: {
      value: 20
    },
    color: {
      value: "#ffffff"
    },
    links: {
      enable: true,
      distance: 200
    },
    shape: {
      type: "circle"
    },
    opacity: {
      value: 1
    },
    size: {
      value: {
        min: 4,
        max: 6
      }
    },
    move: {
      enable: true,
      speed: 2
    }
  },
  background: {
    color: "#000000"
  },
  poisson: {
    enable: true
  }
};

loadParticles(configs);
  });
</script>
































<!-- ---
import DeveloperCard from '@components/DeveloperCard.astro';
import Layout from '@layouts/Layout.astro';

const developers = [
  { name: 'Varshith', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Len', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Karthik', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Varshith', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Len', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Karthik', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Ameesha', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
  { name: 'Varshith', description: 'All Hail Varshith', linkedinLink: '#', githubLink: '#' },
];

import { loadFull } from "tsparticles";
---

<!-- <Layout>
  <main class="content-container">
    <div id="tsparticles"></div> <!-- Particles container -->
    <!-- <div class="mt-32 flex flex-col gap-8 items-center">
      <h2 class="fade-up uppercase text-6xl text-center">Meet the dev team</h2>
      <div class="flex flex-wrap gap-32 justify-center">
        {
          developers.map((dev, index) => (
            <div class="item">
            <DeveloperCard
              name={dev.name}
              description={dev.description}
              linkedinLink={dev.linkedinLink}
              githubLink={dev.githubLink}
              />
          </div>
        ))
      }
    </div>

    </div>
    </main>
    </Layout>

    <style>
    #tsparticles {
      position: absolute;
      width: 100vw;
      height: 100vh;
      top: 0;
      left: 0;
      z-index: -1; /* Ensures particles are behind other content */
    }

    @keyframes slideUp {
      from {
        opacity: 0;
        transform: translateY(50px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .fade-up {
      opacity: 0;
      transform: translateY(50px);
      animation: slideUp 1s ease-out forwards;
    }
    </style>

    <script>
    import { loadFull } from "tsparticles";
    import type { Engine } from "@tsparticles/engine";
    import type { Container } from "tsparticles-engine";

    declare global {
      interface Window {
        particlesInit: (engine: Engine) => Promise<void>;
        particlesLoaded: (container: Container) => Promise<void>;
      }
    }

    window.particlesInit = async function (engine: Engine) {
      await loadFull(engine);
    }

    window.particlesLoaded = async function (container: Container): Promise<void> {
      console.log("Particles Loaded");
    }

    document.addEventListener("DOMContentLoaded", () => {
      const particlesContainer = document.getElementById("tsparticles");

      if (particlesContainer) {
        window.particlesInit(new Engine()).then(() => {
          window.particlesLoaded(new Engine().get().container);
        });
      }
    });
    </script> -->
